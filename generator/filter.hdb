const addFilter = require('./utils').addFilter;
const registerFilter = require('./utils').registerFilter;

/**
 * Augment FfmpegCommand with the {{filterName}} function.
 *
 *
 * @example
 *  ffmpeg().{{filterName}}()
 *    ...             // call filter configuration functions
 *    .build()        // end filter configuration
 *    ...
 *    .applyFilters() // called once all filters have been configured
 *
 * @param  {FfmpegCommand} ffmpegCommand The fluent-ffmpeg constructor.
 * @return {FfmpegCommand} The ffmpegCommand augmented with the {{filterName}} function.
 */
function {{toIdentifier filterName}}(ffmpegCommand) {
  registerFilter(ffmpegCommand, '{{toIdentifier filterName}}', function() {
    return new {{toIdentifier (capitalize filterName)}}Filter(this);
  });
  return ffmpegCommand;
}

/**
 * Class exposing methods to configure the vstack filter in a builder pattern way.
 *
 * See {@link http://ffmpeg.org/ffmpeg-filters.html#vstack} for a description
 * of each configuration option.
 */
class {{toIdentifier (capitalize filterName)}}Filter {
  /**
   * @param  {FfmpegCommand} ffmpegCommand The fluent-ffmpeg constructor.
   */
  constructor (ffmpeg) {
    this.ffmpeg = ffmpeg;
    {{#each params}}
    {{capitalize ../filterName}}Filter.prototype.with{{toIdentifier (capitalize paramName)}} = this.{{toIdentifier paramName}};
    {{/each}}
  }

  {{#each params}}
  /**
   * {{formatComment description}}
   * @param val
   */
  {{toIdentifier name}}(val) {
    this._{{toIdentifier name}} = val;
    return this;
  }

  {{/each}}

  /**
   * Creates this filter configuration and registers it in the ffmpeg instance.
   * @return {ffmpegCommand} The ffmpeg instance.
   */
  build() {
    let opt = {};
    {{#each params}}
    if (this._{{toIdentifier paramName}}) {
      opt['{{paramName}}'] = this._{{toIdentifier paramName}};
    }
    {{/each}}

    addFilter(this.ffmpeg, {
      filter: '{{filterName}}',
      options: opt
    });
    return this.ffmpeg;
  }
}

module.exports.{{toIdentifier filterName}} = {{toIdentifier filterName}};
